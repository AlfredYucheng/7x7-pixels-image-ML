B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
mult_log_results <- run_all_multinom(all_samples, test.dat,n.rows = 60000,n.values, iterations)
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
num.per.group = n.rows / knn.num
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num =5){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_knn_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "Multinomial Logistic Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 10)
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
num.per.group = n.rows / knn.num
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num =5){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "Multinomial Logistic Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 10)
library(rpart)
get_class_stats <- function(train.data, test.data, n.rows){
A <- dim(train.data)[1]/n.rows
# measure the start time
toc <- Sys.time()
classModel <- rpart(label ~., data = train.data)
predicted_class <- predict(classModel, test.dat,type = "class")
C <- mean(predicted_class != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_class <- function(samples, test.data, n.rows,n.values,iterations,num.digits = 4){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_class_stats(train.data, test.data, n.rows)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "KNN-5 Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
#fit = rpart(label ~. ,data = train.dat.500_1,method = "class")
#predict(fit,test.dat[,-1],type = "class")
#sum(res == test.dat[,1])
run_all_class(samples = all_samples,test.data = test.dat, n.rows = 60000,iterations = 3,n.values = n.values,num.digits = 4)
train.data.check1 <- samples[n == 1 & k == 1][, 1:50]
train.data.check1 <- all_samples[n == 1 & k == 1][, 1:50]
head(train.data.check1)
train.data.check1 <- all_samples[n == 500 & k == 1][, 1:50]
head(train.data.check1)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1],cl = train.data[,1],knn =10)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1],cl = train.data[,1],k =10)
dim(train.data.check1[,-1])
dim(test.data[,-1])
dim(train.data[,1])
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1],cl = train.data.check1[,1],k =10)
dim(train.data.check1[,1])
str(train.data.check1)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1],cl = as.vector(train.data.check1[,1]),k =10)
str(train.dat)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1],cl = as.factor(train.data.check1[,1]),k =10)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = as.factor(train.data.check1[,1]),k =10)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = as.factor(train.data.check1[,1]),k=10)
resknn = knn(train = train.data.check1,test = test.data, cl = as.factor(train.data.check1[,1]),k=10)
cl = as.factor(train.data.check1[,1])
str(cl)
resknn = knn(train = train.data.check1,test = test.data, cl = train.dat[1:500,1],k=10)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = train.dat[1:500,1],k=10)
str(train.dat)
str(train.data)
cl = as.factor(train.data[1:500,1])
str(cl)
train.data[,1] = lapply(train.data[,1],as.factor)
str(train.data[,1])
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = train.data.check1[1:500,1],k=10)
str(train.data.check1)
train.data.check1[,1] = lapply(train.data.check1[,1],as.factor)
str(train.data.check1)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = train.data.check1[1:500,1],k=10)
str(train.data.check1)
resknn = knn(train = train.data.check1[,-1],test = test.data[,-1], cl = train.data.check1[,1],k=10)
dim(train.data.check1)
dim(test.data)
dim(cl)
dim(train.data.check1[,1])
str(train.data.check1[,1])
str(train.dat[,1])
train.data1 = melt(train.data)
str(train.data1[,1])
head(train.data1[,1])
head(train.data1[,1],20)
head(train.data[,1],20)
head(train.data1[,1],40)
head(train.data1[,1],50:60)
head(train.data1[,1],80)
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
train.data[,1] = lapply(train.data[,1],as.factor)
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num =5){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "Multinomial Logistic Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 10)
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
setDF(train.data)
train.data[,1] = lapply(train.data[,1],as.factor)
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num =5){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "Multinomial Logistic Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 10)
setDF(train.data)
str(train.data)
train.data = fread("MNIST-fashion training set-49.csv")
str(train.data)
setDF(train.data)
str(train.data)
train.data = fread("MNIST-fashion training set-49.csv")
test.data = fread("MNIST-fashion testing set-49.csv")
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
setDF(train.data)
#train.data[,1] = lapply(train.data[,1],as.factor)
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num =5){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "Multinomial Logistic Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 10)
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
setDF(train.data)
#train.data[,1] = lapply(train.data[,1],as.factor)
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "KNN10Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
library(class)
get_KNN_stats <- function(train.data, test.data, n.rows, knn.num){
A <- dim(train.data)[1]/n.rows
# measure the start time
setDF(train.data)
#train.data[,1] = lapply(train.data[,1],as.factor)
cl = train.data[,1]
toc <- Sys.time()
knnres = knn(test = test.data[,-1],train = train.data[,-1], cl = cl, k = knn.num)
C <- mean(knnres != test.dat[,1])
# measure the end time
tic <- Sys.time()
the.time <- as.numeric(x = tic-toc, units = "secs")
the.time <- the.time/60
B <- min(1, the.time)
points <- 0.25*A + 0.25*B + 0.5*C
return (c(A,B,C,points))
}
run_all_KNN <- function(samples, test.data, n.rows, iterations,n.values,num.digits = 4,knn.num){
# this will store the average results for each model and sample size
all_results <- list()
i <- 1
A <- 0
B <- 0
C <- 0
points <- 0
for (value in n.values){
for (i in 1:iterations){
train.data <- samples[n == value & k == i][, 1:50]
results <- get_KNN_stats(train.data, test.data, n.rows,knn.num)
A <- A + results[1]
B <- B + results[2]
C <- C + results[3]
points <- points + results[4]
i <- i + 1
# check that we have done all three sets for one sample size
if (i == (iterations + 1)){
i <- 1
# average the results from the the three sets for that given sample size
results <- data.table(Model = "KNN5Regression", `Sample Size` = dim(train.data)[1],
A = A/iterations, B = B/iterations, C = C/iterations, Points = points/iterations)
results <- results[, lapply(X = .SD, FUN = "round.numerics", digits = num.digits)]
all_results <- rbindlist(l = list(all_results, results), fill = TRUE)
# reset A, B, C, and points to calculate for next set of 3
A <- 0
B <- 0
C <- 0
points <- 0
}
}
}
return (all_results)
}
run_all_KNN(all_samples,test.data,n.rows = 60000,n.values = n.values,iteration =3,knn.num = 5)
str(train.data$label)
train.data[,1] = as.factor(train.data[,1])
str(train.data[,1])
str(train.data)
set.seed(72)
knitr::opts_chunk$set(echo = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55))
train.data = fread("MNIST-fashion training set-49.csv")
library(data.table)
library(DT)
train.data = fread("MNIST-fashion training set-49.csv")
str(train.data)
check1 = train.data[1:500,1]
str(train.data.check1)
check1
check1 = as.factor(check1)
str(check1)
